--Part 1: Yelp Dataset Profiling and Understanding
--1. Profile the data by finding the total number of records for each of the tables below:
--i Attribute table =10000
SELECT COUNT(*) AS 'total attribute records'
FROM attribute
--ii Business table =10000
SELECT COUNT(*) AS 'total business records'
FROM business
--iii Category table =10000
SELECT COUNT(*) AS 'total category records'
FROM category
--iv Checkin table =10000
SELECT COUNT(*) AS 'total checkin records'
FROM checkin
--v elite_years table =10000
SELECT COUNT(*) AS 'total elite_years records'
FROM elite_years
--vi friend table = 10000
SELECT COUNT(*) AS 'total friend records'
FROM friend
--vii hours table = 10000
SELECT COUNT(*) AS 'total hours records'
FROM hours
--viii photo table = 10000
SELECT COUNT(*) AS 'total photo records'
FROM photo
--ix review table = 10000
SELECT COUNT(*) AS 'total review records'
FROM review
--x tip table = 10000
SELECT COUNT(*) AS 'total tip records'
FROM tip
--xi user table = 10000
SELECT COUNT(*) AS 'total user records'
FROM user
--2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
--i. Business = 10000
SELECT COUNT(DISTINCT(id)) AS 'total distinct id '
FROM business
--ii. Hours = 1562 
SELECT COUNT(DISTINCT(business_id)) AS 'total distinct business_id'
FROM hours
--iii. Category =2643
SELECT COUNT(DISTINCT(business_id)) AS 'total distinct business_id '
FROM category
--iv. Attribute =1115
SELECT COUNT(DISTINCT(business_id)) AS 'total distinct business_id '
FROM attribute
--v. Review =
+--------------------+----------------------------+------------------------+
| total distinct id  | total distinct business_id | total distinct user_id |
+--------------------+----------------------------+------------------------+
|              10000 |                       8090 |                   9581 |
+--------------------+----------------------------+------------------------+
SELECT COUNT(DISTINCT(id)) AS 'total distinct id '
,COUNT(DISTINCT(business_id)) AS 'total distinct business_id'
,COUNT(DISTINCT(user_id)) AS 'total distinct user_id'
FROM review
--vi. Checkin = 493
SELECT COUNT(DISTINCT(business_id)) AS 'total distinct business_id'
FROM checkin 
--vii. Photo =
+-------------------+----------------------------+
| total distinct id | total distinct business_id |
+-------------------+----------------------------+
|             10000 |                       6493 |
+-------------------+----------------------------+
SELECT COUNT(DISTINCT(id)) AS 'total distinct id'
,COUNT(DISTINCT(business_id)) AS 'total distinct business_id'
FROM photo
--viii. Tip = 
+------------------------+----------------------------+
| total distinct user_id | total distinct business_id |
+------------------------+----------------------------+
|                    537 |                       3979 |
+------------------------+----------------------------+
SELECT COUNT(DISTINCT(user_id)) AS 'total distinct user_id'
,COUNT(DISTINCT(business_id)) AS 'total distinct business_id'
FROM tip
--ix. User = 10000
SELECT COUNT(DISTINCT(id)) AS 'total distinct id'
FROM user
--x. Friend = 11
SELECT COUNT(DISTINCT(user_id)) AS 'total distinct user_id'
FROM friend
--xi. Elite_years =2780
SELECT COUNT(DISTINCT(user_id)) AS 'total distinct user_id'
FROM elite_years

--3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

--	Answer: no
--	SQL code used to arrive at answer:
		SELECT * 
		FROM user
		WHERE id IS NULL 
		OR name IS NULL
		OR review_count IS NULL 
		OR yelping_since IS NULL 
		OR useful IS NULL
		OR funny IS NULL
		OR cool IS NULL
		OR fans IS NULL
		OR average_stars IS NULL
		OR compliment_hot IS NULL
		OR compliment_more IS NULL
		OR compliment_profile  IS NULL
		OR compliment_cute  IS NULL
		OR compliment_list IS NULL
		OR compliment_note  IS NULL
		OR compliment_plain IS NULL
		OR compliment_cool  IS NULL
		OR compliment_funny  IS NULL
		OR compliment_writer  IS NULL
		OR compliment_photos   IS NULL
--4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:
--	i. Table: Review, Column: Stars
		min:1		max:5		avg:3.7082 
--	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549		
--	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
--	iv. Table: Checkin, Column: Count
	
		min:1		max:53 		avg:1.9414 	
--	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995

--5. List the cities with the most reviews in descending order:

--	SQL code used to arrive at answer:
		SELECT city,sum(review_count)
		FROM business
		GROUP BY city
		ORDER BY sum(review_count) DESC
	--	Copy and Paste the Result Below:
		+-----------------+-------------------+
		| city            | sum(review_count) |
		+-----------------+-------------------+
		| Las Vegas       |             82854 |
		| Phoenix         |             34503 |
		| Toronto         |             24113 |
		| Scottsdale      |             20614 |
		| Charlotte       |             12523 |
		| Henderson       |             10871 |
		| Tempe           |             10504 |
		| Pittsburgh      |              9798 |
		| MontrÃ©al        |              9448 |
		| Chandler        |              8112 |
		| Mesa            |              6875 |
		| Gilbert         |              6380 |
		| Cleveland       |              5593 |
		| Madison         |              5265 |
		| Glendale        |              4406 |
		| Mississauga     |              3814 |
		| Edinburgh       |              2792 |
		| Peoria          |              2624 |
		| North Las Vegas |              2438 |
		| Markham         |              2352 |
		| Champaign       |              2029 |
		| Stuttgart       |              1849 |
		| Surprise        |              1520 |
		| Lakewood        |              1465 |
		| Goodyear        |              1155 |
		+-----------------+-------------------+
		(Output limit exceeded, 25 of 362 total rows shown)

--6. Find the distribution of star ratings to the business in the following cities:
	--i. Avon
	--SQL code used to arrive at answer:
		SELECT stars,count(stars) AS 'count'
		FROM business 
		WHERE City = 'Avon'
		GROUP BY stars
--	Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):
		+-------+-------+
		| stars | count |
		+-------+-------+
		|   1.5 |     1 |
		|   2.5 |     2 |
		|   3.5 |     3 |
		|   4.0 |     2 |
		|   4.5 |     1 |
		|   5.0 |     1 |
		+-------+-------+

	--ii. Beachwood
	--SQL code used to arrive at answer:
		SELECT stars,count(stars) AS 'count'
		FROM business 
		WHERE City = 'Beachwood'
		GROUP BY stars
	--Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):
		+-------+-------+
		| stars | count |
		+-------+-------+
		|   2.0 |     1 |
		|   2.5 |     1 |
		|   3.0 |     2 |
		|   3.5 |     2 |
		|   4.0 |     1 |
		|   4.5 |     2 |
		|   5.0 |     5 |
		+-------+-------+


--7. Find the top 3 users based on their total number of reviews:
		--SQL code used to arrive at answer:
		SELECT name,review_count
		FROM user
		ORDER BY review_count DESC
		LIMIT 3
		--Copy and Paste the Result Below:
		+--------+--------------+
		| name   | review_count |
		+--------+--------------+
		| Gerald |         2000 |
		| Sara   |         1629 |
		| Yuri   |         1339 |
		+--------+--------------+

--8. Does posing more reviews correlate with more fans?

	 SELECT AVG( (review_count - avg_x) * (fans - avg_y) )*AVG( (review_count - avg_x) * (fans - avg_y) )/(var_x*var_y) AS R2 
	 FROM user, (SELECT 
     avg_x,
     avg_y,
     AVG((review_count - avg_x)*(review_count - avg_x)) AS var_x, 
     AVG((fans - avg_y)*(fans - avg_y)) AS var_y 
     FROM user, (SELECT 
     AVG(review_count) AS avg_x, 
     AVG(fans) AS avg_y 
      FROM user))

	 --Please explain your findings and interpretation of the results:
  	 No correlation between posing more reviews and more fans

--9. Are there more reviews with the word "love" or with the word "hate" in them?	
	--Answer: 'love' is more than 'Hate' 
	 
	--SQL code used to arrive at answer:
	SELECT count(id)
	FROM review
	WHERE text like '%love%'
	-- Love : 1780
	SELECT count(id)
	FROM review
	WHERE text like '%hate%'
	-- Hate : 232
--10. Find the top 10 users with the most fans:

	--SQL code used to arrive at answer:
	SELECT name,fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10	
	--Copy and Paste the Result Below:
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+

--Part 2: Inferences and Analysis
--1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
--Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
--Choice : Toronto   | Restaurants
--i. Do the two groups you chose to analyze have a different distribution of hours?
	--Answer : YES they do
--ii. Do the two groups you chose to analyze have a different number of reviews?
	--Answer : YES they do
--iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	--Answer:
		--Nothing can be deduced from the different locations between the two groups
		--in fact each address of a business is different from the other.
	--SQL code:
		SELECT b.city
		,c.category
		,CASE 
		WHEN b.stars >= 2.0 and b.stars <= 3.0  then '2-3'
		WHEN b.stars >= 4.0 and b.stars <= 5.0  then '4-5'
		END AS 'grp'
		,count(h.hours) as 'count of hours'
		,sum(b.review_count) as 'sum of review_count'
		FROM business b 
		JOIN category c
		ON c.business_id = b.id
		JOIN hours h 
		ON h.business_id = b.id 
		WHERE b.city='Toronto' and c.category='Restaurants' and grp is not NULL    
		GROUP BY grp


--2. Group business based on the ones that are open and the ones that are closed. 
--What differences can you find between the ones that are still open and the ones that are closed?
-- List at least two differences and the SQL code you used to arrive at your answer.
--i. Difference 1:
	--sum of stars
--ii. Difference 2:
	--sum of review-count 
--SQL code used for analysis:
	SELECT is_open
	,sum(stars) as 'sum of stars'
	,sum(review_count) as 'sum of review-count'
	FROM business
	GROUP BY is_open

--3. For this last part of your analysis, you are going to choose the type
--of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.
--Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis,
--clustering businesses to find commonalities or anomalies between them, predicting the overall star
--rating for a business, predicting the number of fans a user will have, and so on. These are just 
--a few examples to get you started, so feel free to be creative and come up with your own problem 
--you want to solve. Provide answers, in-line, to all of the following:

--i. Indicate the type of analysis you chose to do:
	--predicting the number of fans a user will have
--ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
	--in order to predict the number of fans of a user we must focus on the number of times
	--he has given at least 4 stars to the different companies he has rated
--iii. Output of your finished dataset:
		+------------------------+-------------------+
		| user_id                | count(stars >= 4) |
		+------------------------+-------------------+
		| 8teQ4Zc9jpl_ffaPJUn6Ew |                 5 |
		| RBZ_kMjowV0t6_nv2UKaDQ |                 4 |
		| U4INQZOPSUaj8hMjLlZ3KA |                 4 |
		| rCWrxuRC8_pfagpchtHp6A |                 4 |
		| -PHC1ulwHkY4LEmMqmFwPg |                 3 |
		| 0UI9KTPdtkwl9lMdMT-Sgg |                 3 |
		| 5JVY32_bmTBfIGpCCsnAfw |                 3 |
		| Ae4uXwFHp-5fGrt6OONaXw |                 3 |
		| AvC5XQAElcGAAn_Wr5auEg |                 3 |
		| CxDOIDnH8gp9KXzpBHJYXw |                 3 |
		| LwVUO_5jjHuJRhvl6hlHVg |                 3 |
		| N0qq4upibIRvLzE2SzVPtQ |                 3 |
		| N3oNEwh0qgPqPP3Em6wJXw |                 3 |
		| Q9mA60HnY87C1TW5kjAZ6Q |                 3 |
		| RylA6VZUTRuMGBu4nHKbCw |                 3 |
		| Tsm8VraTp5OGyVALtUiCeQ |                 3 |
		| YBT3EKUNN4IP8m4x7sGu1g |                 3 |
		| _AwABkxw1joJPXn-j9dNiA |                 3 |
		| dGUOe2TBchiGvU1BNkmTog |                 3 |
		| dIIKEfOgo0KqUfGQvGikPg |                 3 |
		| yT_QCcnq-QGipWWuzIpvtw |                 3 |
		| -Biq3Dt8YhkRJEO_ITrvww |                 2 |
		| -l4iRZ2wYow39RTevk21Dg |                 2 |
		| -tQ3UVVdNBZBR_HOVFROzw |                 2 |
		| 0J9mtVJ4_QGsXYVK8qJzOQ |                 2 |
		+------------------------+-------------------+
		(Output limit exceeded, 25 of 6379 total rows shown)

--iv. Provide the SQL code you used to create your final dataset:
	
	SELECT user_id
	,count(stars) as 'count(stars >= 4)'
	FROM review  
	WHERE stars >= 4 
	GROUP BY user_id
	ORDER BY count(stars) DESC
